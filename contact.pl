#!/usr/bin/perl -w -- 
# generated by wxGlade 0.6.5 (standalone edition) on Fri Jan 11 14:59:42 2013
# To get wxPerl visit http://wxPerl.sourceforge.net/

use FindBin;
use lib "$FindBin::Bin";

#use lib "C:\\Documents and Settings\\will\\Desktop\\projects\\contact_app";
use Wx 0.15 qw[:allclasses];
use strict;
use Wx::Grid;

package MyFrame;

use Wx qw[:everything];
use Wx::Event qw(EVT_GRID_LABEL_LEFT_CLICK EVT_GRID_LABEL_LEFT_DCLICK EVT_MENU);
use base qw(Wx::Frame);
use strict;
use warnings;
use DBI          qw();

use WxContact qw(StartApp   $frame $xr show_add show_dialog %test_list 
$xrc $frmID $sbar %menu  $CloseWin $icon %txtctrl $dialog $frameGrid ) ;

use WxDelete qw($frame $xr show_delete  $currentData $xrc );
use WxSearch qw($frame $xr show_search $Exit);
my $currentDBData;
my $dbfile = "contactmanagement.db";
my @currentDataRow;
# global search
my $search_state;
my $g_sqlcount;
my $g_sqlselect;
my @g_grid_id_array;

#global --- other
my $g_self; 

		my @dbColums = qw(ContactID
		          Contact_FirstName
	                  Contact_LastName
	                   Contact_Phone 
	                   Contact_State
	                   Contact_City 
	                   Contact_ContactDate);
	                   
	          my $tmpe = join(",",@dbColums);       

sub new {
	my( $self, $parent, $id, $title, $pos, $size, $style, $name ) = @_;
	$parent = undef              unless defined $parent;
	$id     = -1                 unless defined $id;
	$title  = ""         unless defined $title;
	$pos    = wxDefaultPosition  unless defined $pos;
	$size   = wxDefaultSize      unless defined $size;
	$name   = ""                 unless defined $name;

        

#                begin wxGlade: MyFrame::new

	$style = wxDEFAULT_FRAME_STYLE 
		unless defined $style;

	$self = $self->SUPER::new( $parent, $id, $title, $pos, $size, $style, $name );
	$self->{grid_1} = Wx::Grid->new($self, -1);
         $g_self = $self;
         
#                create dialog

         our $frame = $self;
         our $currentIndex = 0;
         our $Refresh = \&Refresh;
         
#    debug         print "script frame = $frame \n";

         WxContact->new();
         WxDelete->new();
         WxSearch->new();	
          
#                  Menu Bar

	$self->{frame_1_menubar} = Wx::MenuBar->new();
	my $wxglade_tmp_menu;
	my $menu = Wx::Menu->new();
	my $menu2 = Wx::Menu->new();
	
	$menu->Append(102, "Refresh" );
	$menu->Append( wxID_CLOSE, "Exit" );
	$menu2->Append( 101, "Add" );

	$menu2->Append( 103, "Delete" );
        $menu2->Append( 104, "Search" );
	
	
	$self->{frame_1_menubar}->Append($menu, "file");
	$self->{frame_1_menubar}->Append($menu2, "dialog");

	
	$self->SetMenuBar($self->{frame_1_menubar});

	EVT_MENU( $self, wxID_CLOSE, sub { $_[0]->Close; $frame->Destroy() } );


#	EVT_MENU( $self, wxID_CLOSE, sub { $_[0]->Close; $self->Destroy() } );


	EVT_MENU( $self, 101, \&add_dialog );
	EVT_MENU( $self, 102, \&Refresh );
	EVT_MENU( $self, 103, \&Delete );
	EVT_MENU( $self, 104, \&Search );


	
	

	
#                     Menu Bar end


	$self->__set_properties();
	$self->__do_layout();

#                          end wxGlade

	return $self;

}


sub __set_properties {
	my $self = shift;

# begin wxGlade: MyFrame::__set_properties
    my @grid_id_array;
     @g_grid_id_array = @grid_id_array;
#  SetHeading();
  Init();
                     
  EVT_GRID_LABEL_LEFT_CLICK( $self, sub {  print G2S( $_[1] ); print "click\n"; $_[1]->Skip;  });
  EVT_GRID_LABEL_LEFT_DCLICK( $self, \&show_dialog_local);

                    
 sub G2S {
  my $event = shift;
  my( $x, $y ) = ( $event->GetCol, $event->GetRow );
   @currentDataRow = getCurrent($y);
  return "( $x, $y )";
}
 
sub show_dialog_local
{
   show_dialog(0, @currentDataRow);
   Refresh();	
}       

#    sql set routines

sub initsql
{
          $g_sqlcount =    "SELECT COUNT(*)  FROM ContactData where ContactID > 0";
          $g_sqlselect ="SELECT " . $tmpe . " FROM ContactData where ContactID > 0";
}

sub name_search_sql
{
	    	my  $search_crit = shift;

           $g_sqlcount =  " SELECT COUNT(*)  FROM ContactData where Contact_LastName = '$search_crit'";
           $g_sqlselect =   "SELECT " . $tmpe . " FROM ContactData where Contact_LastName = '$search_crit'";
 }

 sub type_search_sql
{
	
	my  $search_crit = shift;
        $g_sqlcount =  " SELECT COUNT(*)  FROM ContactData where Contact_Type = '$search_crit'";
        $g_sqlselect =   "SELECT " . $tmpe . " FROM ContactData where Contact_Type = '$search_crit'";
}
      
 sub state_search_sql
{
	my  $search_crit = shift;
	print " state search ---> $search_crit\n";
        $g_sqlcount =  " SELECT COUNT(*)  FROM ContactData where Contact_State = '$search_crit'";
        $g_sqlselect =   "SELECT " . $tmpe . " FROM ContactData where Contact_State = '$search_crit'";
 }
      
      
sub Delete
{
	print "Del: $currentDataRow[0] \n"; 
       show_delete(@currentDataRow);                     
}

 sub Search
{
	my $local = $currentData;
	print "Search: $local \n"; 
       my($type,$crit) = show_search();
       print "crit: $crit \n";
       print "type: $type\n";
       setsql($type,$crit);   
       Search_Refresh();                     
}     

sub setsql
{
       my ($type,$search_crit) = @_;

         print "setsql- type: $type - crit: $search_crit\n";




                               if ($type == 1)
                               {  
                               	        state_search_sql($search_crit);
                               }     
                               else
                               {
                               	         if ($type == 2)
                                        {  
                                        	 name_search_sql($search_crit);
                                        }     
                                       else
                                        {
                                        	if ($type == 3)
                                                {  
                                                	type_search_sql($search_crit);
                                                }     
 
                                        }	                
                               }
                               
                               
}
 
sub Search_Refresh
{
	
	print "g_select: $g_sqlselect\n";
	
	my $sqlselect = $g_sqlselect;
	
    my $dbh = DBI->connect("dbi:SQLite:dbname=$dbfile","","", {});


    my ($count) = $dbh->selectrow_array($g_sqlcount);
 
 
    print  "cnt: $count\n";

	$g_self->SetTitle("CONTACTS-");
	$g_self->{grid_1}->Destroy();
	
	print "after destroy\n";
	
        $g_self->{grid_1} = Wx::Grid->new($g_self, -1);
	$g_self->{grid_1}->CreateGrid($count, 6);
	$g_self->{grid_1}->SetSelectionMode(wxGridSelectRows);
		SetHeading();
       $g_self->__set_properties();
	$g_self->__do_layout();



   my $sth = $dbh->prepare($sqlselect);
    $sth->execute();

    my $cnt_row = 0;
    my $cnt_col = 0;
    
    while (my @result = $sth->fetchrow_array()) {
            print ". ";
            $g_self->{grid_1}->SetCellValue($cnt_row, 0, $result[1] );
            $g_self->{grid_1}->SetCellValue($cnt_row, 1, $result[2] );
            $g_self->{grid_1}->SetCellValue($cnt_row, 2, $result[3] );
            $g_self->{grid_1}->SetCellValue($cnt_row, 3, $result[4] );
            $g_self->{grid_1}->SetCellValue($cnt_row, 4, $result[5] );
            $g_self->{grid_1}->SetCellValue($cnt_row, 5, $result[6] );
            push ( @g_grid_id_array, $result[0] );
            $cnt_row++;
    	
    }
    
    print "\n";
    
    $sth->finish;
 	
	
       
 $dbh->disconnect;
	
}     
  
sub Init
{

    initsql();


    my $dbh = DBI->connect("dbi:SQLite:dbname=$dbfile","","", {});



    my ($count) = $dbh->selectrow_array($g_sqlcount);


	$g_self->SetTitle("CONTACTS");

	$g_self->{grid_1}->CreateGrid($count, 6);
	$g_self->{grid_1}->SetSelectionMode(wxGridSelectRows);
		SetHeading();
		

   my $sth = $dbh->prepare($g_sqlselect);

    $sth->execute();

    my $cnt_row = 0;
    my $cnt_col = 0;
    
    while (my @result = $sth->fetchrow_array()) {
    
            $g_self->{grid_1}->SetCellValue($cnt_row, 0, $result[1] );
            $g_self->{grid_1}->SetCellValue($cnt_row, 1, $result[2] );
            $g_self->{grid_1}->SetCellValue($cnt_row, 2, $result[3] );
            $g_self->{grid_1}->SetCellValue($cnt_row, 3, $result[4] );
            $g_self->{grid_1}->SetCellValue($cnt_row, 4, $result[5] );
            $g_self->{grid_1}->SetCellValue($cnt_row, 5, $result[6] );
            push ( @g_grid_id_array, $result[0] );
            $cnt_row++;
            
    
    	
#        print "id: $result[0], lname: $result[1], fname: $result[2], email: $result[3], password: $result[4]\n";
    }
    $sth->finish;
 	
	
#        $self->{grid_1}->SetCellValue(0, 0, "wxGrid is Good");
        
 $dbh->disconnect;
	
}       

sub add_dialog
{
	    my @darray;
	    my $id = -99;
	    my $i = 0;
     while ( $i < 5 )
     {	
	$darray[$i] = "." ;
	$i++; 
     }	
	my $tmp = join (".",@darray);
	$currentData = $id . " " . $tmp;
       show_dialog(1);
}       
       
sub getCurrent
{
	my ($index) = @_;
	my $id = $g_grid_id_array[$index];
	
	print "id: $id\n";
	
	
    my $dbh = DBI->connect("dbi:SQLite:dbname=$dbfile","","", {});
	
	                   
	  my @dbColumsT = qw( ContactID
                           Contact_BusinessName
                           Contact_FirstName
	                   Contact_LastName
	                   Contact_Street
	                   Contact_City 
	                   Contact_State 
	                   Contact_Zip
	                   Contact_Phone
	                   Contact_ContactDate
	                   Contact_Type
	                   Contact_Notes   );
	
	my $temper = join(",",@dbColumsT);
	my $sql = "SELECT " . $temper . " FROM ContactData WHERE ContactID=?";
        
        my @row = $dbh->selectrow_array($sql,undef,$id);
                 unless (@row) { die "record not found in database"; }
   # debug        my ($fname,$lname) = @row;
	
     $dbh->disconnect;
    my $i = 0;
#    my @darray;
if(0)
{
     while ( $i < 12 )
     {	
	$row[$i] = "." unless ( length($row[$i]) > 0 );
	$i++; 
     }
 }    	
	my $tmp = join (" ",@row);
	
	print " in GetCurrent - value tmp = $tmp \n ";
	
	return  @row;
}       
       
sub SetHeading
{
#           $self->{grid_1}->SetColLabelValue(0, "ID" );	
           $g_self->{grid_1}->SetColLabelValue(0, "First Name" );	
           $g_self->{grid_1}->SetColLabelValue(1, "Last Name" );	
           $g_self->{grid_1}->SetColLabelValue(2, "Phone" );	
           $g_self->{grid_1}->SetColLabelValue(3, "State" );
            $g_self->{grid_1}->SetColLabelValue(4, "City" );
            $g_self->{grid_1}->SetColLabelValue(5, "Date" );	
}	
       
sub Refresh
{
	
	    initsql();
	
    my $dbh = DBI->connect("dbi:SQLite:dbname=$dbfile","","", {});

    my ($count) = $dbh->selectrow_array($g_sqlcount);


	$g_self->SetTitle("CONTACTS");
        $g_self->{grid_1}->Destroy();
		
	$g_self->{grid_1} = Wx::Grid->new($g_self, -1);
	$g_self->{grid_1}->CreateGrid($count, 6);
	$g_self->{grid_1}->SetSelectionMode(wxGridSelectRows);
		SetHeading();
	$g_self->__set_properties();
	$g_self->__do_layout();	
		

   my $sth = $dbh->prepare($g_sqlselect);

    $sth->execute();

    my $cnt_row = 0;
    my $cnt_col = 0;
    
    while (my @result = $sth->fetchrow_array()) {
    
            $g_self->{grid_1}->SetCellValue($cnt_row, 0, $result[1] );
            $g_self->{grid_1}->SetCellValue($cnt_row, 1, $result[2] );
            $g_self->{grid_1}->SetCellValue($cnt_row, 2, $result[3] );
            $g_self->{grid_1}->SetCellValue($cnt_row, 3, $result[4] );
            $g_self->{grid_1}->SetCellValue($cnt_row, 4, $result[5] );
            $g_self->{grid_1}->SetCellValue($cnt_row, 5, $result[6] );
            push ( @g_grid_id_array, $result[0] );
            $cnt_row++;
            
    
    	
#        print "id: $result[0], lname: $result[1], fname: $result[2], email: $result[3], password: $result[4]\n";
    }
    $sth->finish;
 	
	
#        $self->{grid_1}->SetCellValue(0, 0, "wxGrid is Good");
        
 $dbh->disconnect;
	
}       

# end wxGlade
}

sub __do_layout {
	my $self = shift;

# begin wxGlade: MyFrame::__do_layout

	$self->{sizer_1} = Wx::BoxSizer->new(wxHORIZONTAL);
	$self->{sizer_1}->Add($self->{grid_1}, 1, wxALL | wxEXPAND, 10);
	$self->SetSizer($self->{sizer_1});
	$self->{sizer_1}->Fit($self);
	$self->Layout();

# end wxGlade
}

# end of class MyFrame

1;

1;

package main;

# unless(caller){
	local *Wx::App::OnInit = sub{1};
	my $app = Wx::App->new();
	Wx::InitAllImageHandlers();

	my $frame_1 = MyFrame->new();
	
#  debug	print " frame_1 = $frame_1 \n ";

	$app->SetTopWindow($frame_1);
	$frame_1->Show(1);
	$app->MainLoop();
# }
